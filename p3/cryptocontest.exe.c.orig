typedef unsigned char   undefined;

typedef unsigned long long    GUID;
typedef pointer32 ImageBaseOffset32;

typedef unsigned char    bool;
typedef unsigned char    byte;
typedef unsigned int    dword;
typedef long long    longlong;
typedef unsigned long long    qword;
typedef unsigned char    uchar;
typedef unsigned int    uint;
typedef unsigned long    ulong;
typedef unsigned long long    ulonglong;
typedef unsigned char    undefined1;
typedef unsigned int    undefined4;
typedef unsigned long long    undefined8;
typedef unsigned short    ushort;
typedef unsigned short    wchar16;
typedef short    wchar_t;
typedef unsigned short    word;
typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY _IMAGE_RUNTIME_FUNCTION_ENTRY, *P_IMAGE_RUNTIME_FUNCTION_ENTRY;

struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    ImageBaseOffset32 BeginAddress;
    ImageBaseOffset32 EndAddress;
    ImageBaseOffset32 UnwindInfoAddressOrData;
};

typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion;

typedef struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct;

struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct {
    dword OffsetToDirectory;
    dword DataIsDirectory;
};

union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion {
    dword OffsetToData;
    struct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryStruct;
};

typedef struct CLIENT_ID CLIENT_ID, *PCLIENT_ID;

struct CLIENT_ID {
    void * UniqueProcess;
    void * UniqueThread;
};

typedef struct _SYSTEM_INFO _SYSTEM_INFO, *P_SYSTEM_INFO;

typedef struct _SYSTEM_INFO * LPSYSTEM_INFO;

typedef union _union_552 _union_552, *P_union_552;

typedef ulong DWORD;

typedef void * LPVOID;

typedef ulonglong ULONG_PTR;

typedef ULONG_PTR DWORD_PTR;

typedef ushort WORD;

typedef struct _struct_553 _struct_553, *P_struct_553;

struct _struct_553 {
    WORD wProcessorArchitecture;
    WORD wReserved;
};

union _union_552 {
    DWORD dwOemId;
    struct _struct_553 s;
};

struct _SYSTEM_INFO {
    union _union_552 u;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
};

typedef long LONG;

typedef struct _EXCEPTION_POINTERS _EXCEPTION_POINTERS, *P_EXCEPTION_POINTERS;

typedef LONG (* PTOP_LEVEL_EXCEPTION_FILTER)(struct _EXCEPTION_POINTERS *);

typedef struct _EXCEPTION_RECORD _EXCEPTION_RECORD, *P_EXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD EXCEPTION_RECORD;

typedef EXCEPTION_RECORD * PEXCEPTION_RECORD;

typedef struct _CONTEXT _CONTEXT, *P_CONTEXT;

typedef struct _CONTEXT * PCONTEXT;

typedef void * PVOID;

typedef ulonglong DWORD64;

typedef union _union_54 _union_54, *P_union_54;

typedef struct _M128A _M128A, *P_M128A;

typedef struct _M128A M128A;

typedef struct _XSAVE_FORMAT _XSAVE_FORMAT, *P_XSAVE_FORMAT;

typedef struct _XSAVE_FORMAT XSAVE_FORMAT;

typedef XSAVE_FORMAT XMM_SAVE_AREA32;

typedef struct _struct_55 _struct_55, *P_struct_55;

typedef ulonglong ULONGLONG;

typedef longlong LONGLONG;

typedef uchar BYTE;

struct _M128A {
    ULONGLONG Low;
    LONGLONG High;
};

struct _XSAVE_FORMAT {
    WORD ControlWord;
    WORD StatusWord;
    BYTE TagWord;
    BYTE Reserved1;
    WORD ErrorOpcode;
    DWORD ErrorOffset;
    WORD ErrorSelector;
    WORD Reserved2;
    DWORD DataOffset;
    WORD DataSelector;
    WORD Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];
    M128A XmmRegisters[16];
    BYTE Reserved4[96];
};

struct _struct_55 {
    M128A Header[2];
    M128A Legacy[8];
    M128A Xmm0;
    M128A Xmm1;
    M128A Xmm2;
    M128A Xmm3;
    M128A Xmm4;
    M128A Xmm5;
    M128A Xmm6;
    M128A Xmm7;
    M128A Xmm8;
    M128A Xmm9;
    M128A Xmm10;
    M128A Xmm11;
    M128A Xmm12;
    M128A Xmm13;
    M128A Xmm14;
    M128A Xmm15;
};

union _union_54 {
    XMM_SAVE_AREA32 FltSave;
    struct _struct_55 s;
};

struct _CONTEXT {
    DWORD64 P1Home;
    DWORD64 P2Home;
    DWORD64 P3Home;
    DWORD64 P4Home;
    DWORD64 P5Home;
    DWORD64 P6Home;
    DWORD ContextFlags;
    DWORD MxCsr;
    WORD SegCs;
    WORD SegDs;
    WORD SegEs;
    WORD SegFs;
    WORD SegGs;
    WORD SegSs;
    DWORD EFlags;
    DWORD64 Dr0;
    DWORD64 Dr1;
    DWORD64 Dr2;
    DWORD64 Dr3;
    DWORD64 Dr6;
    DWORD64 Dr7;
    DWORD64 Rax;
    DWORD64 Rcx;
    DWORD64 Rdx;
    DWORD64 Rbx;
    DWORD64 Rsp;
    DWORD64 Rbp;
    DWORD64 Rsi;
    DWORD64 Rdi;
    DWORD64 R8;
    DWORD64 R9;
    DWORD64 R10;
    DWORD64 R11;
    DWORD64 R12;
    DWORD64 R13;
    DWORD64 R14;
    DWORD64 R15;
    DWORD64 Rip;
    union _union_54 u;
    M128A VectorRegister[26];
    DWORD64 VectorControl;
    DWORD64 DebugControl;
    DWORD64 LastBranchToRip;
    DWORD64 LastBranchFromRip;
    DWORD64 LastExceptionToRip;
    DWORD64 LastExceptionFromRip;
};

struct _EXCEPTION_RECORD {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD * ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
};

struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
};

typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

typedef struct _RUNTIME_FUNCTION _RUNTIME_FUNCTION, *P_RUNTIME_FUNCTION;

struct _RUNTIME_FUNCTION {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD UnwindData;
};

typedef struct _RUNTIME_FUNCTION * PRUNTIME_FUNCTION;

typedef struct _UNWIND_HISTORY_TABLE_ENTRY _UNWIND_HISTORY_TABLE_ENTRY, *P_UNWIND_HISTORY_TABLE_ENTRY;

typedef struct _UNWIND_HISTORY_TABLE_ENTRY UNWIND_HISTORY_TABLE_ENTRY;

struct _UNWIND_HISTORY_TABLE_ENTRY {
    DWORD64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
};

typedef union _union_61 _union_61, *P_union_61;

typedef struct _M128A * PM128A;

typedef struct _struct_62 _struct_62, *P_struct_62;

struct _struct_62 {
    PM128A Xmm0;
    PM128A Xmm1;
    PM128A Xmm2;
    PM128A Xmm3;
    PM128A Xmm4;
    PM128A Xmm5;
    PM128A Xmm6;
    PM128A Xmm7;
    PM128A Xmm8;
    PM128A Xmm9;
    PM128A Xmm10;
    PM128A Xmm11;
    PM128A Xmm12;
    PM128A Xmm13;
    PM128A Xmm14;
    PM128A Xmm15;
};

union _union_61 {
    PM128A FloatingContext[16];
    struct _struct_62 s;
};

typedef union _union_63 _union_63, *P_union_63;

typedef ulonglong * PDWORD64;

typedef struct _struct_64 _struct_64, *P_struct_64;

struct _struct_64 {
    PDWORD64 Rax;
    PDWORD64 Rcx;
    PDWORD64 Rdx;
    PDWORD64 Rbx;
    PDWORD64 Rsp;
    PDWORD64 Rbp;
    PDWORD64 Rsi;
    PDWORD64 Rdi;
    PDWORD64 R8;
    PDWORD64 R9;
    PDWORD64 R10;
    PDWORD64 R11;
    PDWORD64 R12;
    PDWORD64 R13;
    PDWORD64 R14;
    PDWORD64 R15;
};

union _union_63 {
    PDWORD64 IntegerContext[16];
    struct _struct_64 s;
};

typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution=0,
    ExceptionContinueSearch=1,
    ExceptionNestedException=2,
    ExceptionCollidedUnwind=3
} _EXCEPTION_DISPOSITION;

typedef enum _EXCEPTION_DISPOSITION EXCEPTION_DISPOSITION;

typedef EXCEPTION_DISPOSITION (EXCEPTION_ROUTINE)(struct _EXCEPTION_RECORD *, PVOID, struct _CONTEXT *, PVOID);

typedef struct _UNWIND_HISTORY_TABLE _UNWIND_HISTORY_TABLE, *P_UNWIND_HISTORY_TABLE;

struct _UNWIND_HISTORY_TABLE {
    DWORD Count;
    BYTE LocalHint;
    BYTE GlobalHint;
    BYTE Search;
    BYTE Once;
    DWORD64 LowAddress;
    DWORD64 HighAddress;
    UNWIND_HISTORY_TABLE_ENTRY Entry[12];
};

typedef wchar_t WCHAR;

typedef struct _KNONVOLATILE_CONTEXT_POINTERS _KNONVOLATILE_CONTEXT_POINTERS, *P_KNONVOLATILE_CONTEXT_POINTERS;

struct _KNONVOLATILE_CONTEXT_POINTERS {
    union _union_61 u;
    union _union_63 u2;
};

typedef union _LARGE_INTEGER _LARGE_INTEGER, *P_LARGE_INTEGER;

typedef struct _struct_19 _struct_19, *P_struct_19;

typedef struct _struct_20 _struct_20, *P_struct_20;

struct _struct_20 {
    DWORD LowPart;
    LONG HighPart;
};

struct _struct_19 {
    DWORD LowPart;
    LONG HighPart;
};

union _LARGE_INTEGER {
    struct _struct_19 s;
    struct _struct_20 u;
    LONGLONG QuadPart;
};

typedef union _LARGE_INTEGER LARGE_INTEGER;

typedef WCHAR * LPCWSTR;

typedef struct _UNWIND_HISTORY_TABLE * PUNWIND_HISTORY_TABLE;

typedef void * HANDLE;

typedef struct _KNONVOLATILE_CONTEXT_POINTERS * PKNONVOLATILE_CONTEXT_POINTERS;

typedef EXCEPTION_ROUTINE * PEXCEPTION_ROUTINE;

typedef struct IMAGE_DOS_HEADER IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

struct IMAGE_DOS_HEADER {
    char e_magic[2]; // Magic number
    word e_cblp; // Bytes of last page
    word e_cp; // Pages in file
    word e_crlc; // Relocations
    word e_cparhdr; // Size of header in paragraphs
    word e_minalloc; // Minimum extra paragraphs needed
    word e_maxalloc; // Maximum extra paragraphs needed
    word e_ss; // Initial (relative) SS value
    word e_sp; // Initial SP value
    word e_csum; // Checksum
    word e_ip; // Initial IP value
    word e_cs; // Initial (relative) CS value
    word e_lfarlc; // File address of relocation table
    word e_ovno; // Overlay number
    word e_res[4][4]; // Reserved words
    word e_oemid; // OEM identifier (for e_oeminfo)
    word e_oeminfo; // OEM information; e_oemid specific
    word e_res2[10][10]; // Reserved words
    dword e_lfanew; // File address of new exe header
    byte e_program[64]; // Actual DOS program
};

typedef struct DotNetPdbInfo DotNetPdbInfo, *PDotNetPdbInfo;

struct DotNetPdbInfo {
    char signature[4];
    GUID guid;
    dword age;
    char pdbpath[36];
};

typedef struct _FILETIME _FILETIME, *P_FILETIME;

typedef struct _FILETIME * LPFILETIME;

struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
};

typedef struct HINSTANCE__ HINSTANCE__, *PHINSTANCE__;

struct HINSTANCE__ {
    int unused;
};

typedef struct HINSTANCE__ * HINSTANCE;

typedef HINSTANCE HMODULE;

typedef int BOOL;

typedef struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct;

struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct {
    dword NameOffset;
    dword NameIsString;
};

typedef struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY IMAGE_LOAD_CONFIG_CODE_INTEGRITY, *PIMAGE_LOAD_CONFIG_CODE_INTEGRITY;

struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
    word Flags;
    word Catalog;
    dword CatalogOffset;
    dword Reserved;
};

typedef struct IMAGE_DEBUG_DIRECTORY IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;

struct IMAGE_DEBUG_DIRECTORY {
    dword Characteristics;
    dword TimeDateStamp;
    word MajorVersion;
    word MinorVersion;
    dword Type;
    dword SizeOfData;
    dword AddressOfRawData;
    dword PointerToRawData;
};

typedef struct IMAGE_FILE_HEADER IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;

struct IMAGE_FILE_HEADER {
    word Machine; // 34404
    word NumberOfSections;
    dword TimeDateStamp;
    dword PointerToSymbolTable;
    dword NumberOfSymbols;
    word SizeOfOptionalHeader;
    word Characteristics;
};

typedef struct IMAGE_LOAD_CONFIG_DIRECTORY64 IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;

typedef enum IMAGE_GUARD_FLAGS {
    IMAGE_GUARD_CF_INSTRUMENTED=256,
    IMAGE_GUARD_CFW_INSTRUMENTED=512,
    IMAGE_GUARD_CF_FUNCTION_TABLE_PRESENT=1024,
    IMAGE_GUARD_SECURITY_COOKIE_UNUSED=2048,
    IMAGE_GUARD_PROTECT_DELAYLOAD_IAT=4096,
    IMAGE_GUARD_DELAYLOAD_IAT_IN_ITS_OWN_SECTION=8192,
    IMAGE_GUARD_CF_EXPORT_SUPPRESSION_INFO_PRESENT=16384,
    IMAGE_GUARD_CF_ENABLE_EXPORT_SUPPRESSION=32768,
    IMAGE_GUARD_CF_LONGJUMP_TABLE_PRESENT=65536,
    IMAGE_GUARD_RF_INSTRUMENTED=131072,
    IMAGE_GUARD_RF_ENABLE=262144,
    IMAGE_GUARD_RF_STRICT=524288,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_1=268435456,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_2=536870912,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_4=1073741824,
    IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK_8=2147483648
} IMAGE_GUARD_FLAGS;

struct IMAGE_LOAD_CONFIG_DIRECTORY64 {
    dword Size;
    dword TimeDateStamp;
    word MajorVersion;
    word MinorVersion;
    dword GlobalFlagsClear;
    dword GlobalFlagsSet;
    dword CriticalSectionDefaultTimeout;
    qword DeCommitFreeBlockThreshold;
    qword DeCommitTotalFreeThreshold;
    pointer64 LockPrefixTable;
    qword MaximumAllocationSize;
    qword VirtualMemoryThreshold;
    qword ProcessAffinityMask;
    dword ProcessHeapFlags;
    word CsdVersion;
    word DependentLoadFlags;
    pointer64 EditList;
    pointer64 SecurityCookie;
    pointer64 SEHandlerTable;
    qword SEHandlerCount;
    pointer64 GuardCFCCheckFunctionPointer;
    pointer64 GuardCFDispatchFunctionPointer;
    pointer64 GuardCFFunctionTable;
    qword GuardCFFunctionCount;
    enum IMAGE_GUARD_FLAGS GuardFlags;
    struct IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    pointer64 GuardAddressTakenIatEntryTable;
    qword GuardAddressTakenIatEntryCount;
    pointer64 GuardLongJumpTargetTable;
    qword GuardLongJumpTargetCount;
    pointer64 DynamicValueRelocTable;
    pointer64 CHPEMetadataPointer;
    pointer64 GuardRFFailureRoutine;
    pointer64 GuardRFFailureRoutineFunctionPointer;
    dword DynamicValueRelocTableOffset;
    word DynamicValueRelocTableSection;
    word Reserved1;
    pointer64 GuardRFVerifyStackPointerFunctionPointer;
    dword HotPatchTableOffset;
    dword Reserved2;
    qword Reserved3;
};

typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;

typedef union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion, *PIMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion;

union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion {
    struct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct IMAGE_RESOURCE_DIRECTORY_ENTRY_NameStruct;
    dword Name;
    word Id;
};

union IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union IMAGE_RESOURCE_DIRECTORY_ENTRY_NameUnion NameUnion;
    union IMAGE_RESOURCE_DIRECTORY_ENTRY_DirectoryUnion DirectoryUnion;
};

typedef struct IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;

typedef struct IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

struct IMAGE_DATA_DIRECTORY {
    ImageBaseOffset32 VirtualAddress;
    dword Size;
};

struct IMAGE_OPTIONAL_HEADER64 {
    word Magic;
    byte MajorLinkerVersion;
    byte MinorLinkerVersion;
    dword SizeOfCode;
    dword SizeOfInitializedData;
    dword SizeOfUninitializedData;
    ImageBaseOffset32 AddressOfEntryPoint;
    ImageBaseOffset32 BaseOfCode;
    pointer64 ImageBase;
    dword SectionAlignment;
    dword FileAlignment;
    word MajorOperatingSystemVersion;
    word MinorOperatingSystemVersion;
    word MajorImageVersion;
    word MinorImageVersion;
    word MajorSubsystemVersion;
    word MinorSubsystemVersion;
    dword Win32VersionValue;
    dword SizeOfImage;
    dword SizeOfHeaders;
    dword CheckSum;
    word Subsystem;
    word DllCharacteristics;
    qword SizeOfStackReserve;
    qword SizeOfStackCommit;
    qword SizeOfHeapReserve;
    qword SizeOfHeapCommit;
    dword LoaderFlags;
    dword NumberOfRvaAndSizes;
    struct IMAGE_DATA_DIRECTORY DataDirectory[16];
};

typedef struct IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

typedef union Misc Misc, *PMisc;

typedef enum SectionFlags {
    IMAGE_SCN_TYPE_NO_PAD=8,
    IMAGE_SCN_RESERVED_0001=16,
    IMAGE_SCN_CNT_CODE=32,
    IMAGE_SCN_CNT_INITIALIZED_DATA=64,
    IMAGE_SCN_CNT_UNINITIALIZED_DATA=128,
    IMAGE_SCN_LNK_OTHER=256,
    IMAGE_SCN_LNK_INFO=512,
    IMAGE_SCN_RESERVED_0040=1024,
    IMAGE_SCN_LNK_REMOVE=2048,
    IMAGE_SCN_LNK_COMDAT=4096,
    IMAGE_SCN_GPREL=32768,
    IMAGE_SCN_MEM_16BIT=131072,
    IMAGE_SCN_MEM_PURGEABLE=131072,
    IMAGE_SCN_MEM_LOCKED=262144,
    IMAGE_SCN_MEM_PRELOAD=524288,
    IMAGE_SCN_ALIGN_1BYTES=1048576,
    IMAGE_SCN_ALIGN_2BYTES=2097152,
    IMAGE_SCN_ALIGN_4BYTES=3145728,
    IMAGE_SCN_ALIGN_8BYTES=4194304,
    IMAGE_SCN_ALIGN_16BYTES=5242880,
    IMAGE_SCN_ALIGN_32BYTES=6291456,
    IMAGE_SCN_ALIGN_64BYTES=7340032,
    IMAGE_SCN_ALIGN_128BYTES=8388608,
    IMAGE_SCN_ALIGN_256BYTES=9437184,
    IMAGE_SCN_ALIGN_512BYTES=10485760,
    IMAGE_SCN_ALIGN_1024BYTES=11534336,
    IMAGE_SCN_ALIGN_2048BYTES=12582912,
    IMAGE_SCN_ALIGN_4096BYTES=13631488,
    IMAGE_SCN_ALIGN_8192BYTES=14680064,
    IMAGE_SCN_LNK_NRELOC_OVFL=16777216,
    IMAGE_SCN_MEM_DISCARDABLE=33554432,
    IMAGE_SCN_MEM_NOT_CACHED=67108864,
    IMAGE_SCN_MEM_NOT_PAGED=134217728,
    IMAGE_SCN_MEM_SHARED=268435456,
    IMAGE_SCN_MEM_EXECUTE=536870912,
    IMAGE_SCN_MEM_READ=1073741824,
    IMAGE_SCN_MEM_WRITE=2147483648
} SectionFlags;

union Misc {
    dword PhysicalAddress;
    dword VirtualSize;
};

struct IMAGE_SECTION_HEADER {
    char Name[8];
    union Misc Misc;
    ImageBaseOffset32 VirtualAddress;
    dword SizeOfRawData;
    dword PointerToRawData;
    dword PointerToRelocations;
    dword PointerToLinenumbers;
    word NumberOfRelocations;
    word NumberOfLinenumbers;
    enum SectionFlags Characteristics;
};

typedef struct IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

struct IMAGE_NT_HEADERS64 {
    char Signature[4];
    struct IMAGE_FILE_HEADER FileHeader;
    struct IMAGE_OPTIONAL_HEADER64 OptionalHeader;
};

typedef struct IMAGE_RESOURCE_DATA_ENTRY IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;

struct IMAGE_RESOURCE_DATA_ENTRY {
    dword OffsetToData;
    dword Size;
    dword CodePage;
    dword Reserved;
};

typedef struct IMAGE_RESOURCE_DIRECTORY IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;

struct IMAGE_RESOURCE_DIRECTORY {
    dword Characteristics;
    dword TimeDateStamp;
    word MajorVersion;
    word MinorVersion;
    word NumberOfNamedEntries;
    word NumberOfIdEntries;
};

typedef struct _iobuf _iobuf, *P_iobuf;

struct _iobuf {
    char * _ptr;
    int _cnt;
    char * _base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char * _tmpfname;
};

typedef struct _iobuf FILE;

typedef int (* _onexit_t)(void);

typedef longlong __time64_t;

typedef ulonglong size_t;

typedef int errno_t;




undefined * FUN_140001000(void)

{
  return &DAT_140007030;
}



void FUN_140001010(undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4)

{
  undefined8 uVar1;
  undefined8 *puVar2;
  undefined8 local_res10;
  undefined8 local_res18;
  undefined8 local_res20;
  
  local_res10 = param_2;
  local_res18 = param_3;
  local_res20 = param_4;
  uVar1 = __acrt_iob_func(1);
  puVar2 = (undefined8 *)FUN_140001000();
  __stdio_common_vfprintf(*puVar2,uVar1,param_1,0,&local_res10);
  return;
}



void FUN_140001070(uint *param_1,int *param_2)

{
  longlong lVar1;
  char cVar2;
  int iVar3;
  longlong *plVar4;
  longlong lVar5;
  undefined8 uVar6;
  undefined8 *_Memory;
  int iVar7;
  int iVar8;
  byte *pbVar9;
  undefined (*pauVar10) [16];
  undefined4 extraout_XMM0_Da;
  undefined4 extraout_XMM0_Db;
  undefined4 extraout_XMM0_Dc;
  undefined4 extraout_XMM0_Dd;
  undefined auStack_78 [32];
  byte local_58 [40];
  ulonglong local_30;
  
  local_30 = DAT_140006008 ^ (ulonglong)auStack_78;
  iVar8 = 0;
  iVar7 = iVar8;
  do {
    iVar3 = memcmp(&DAT_140006620 + (longlong)iVar7 * 10,&PTR_s_chacha20_140004320,0x50);
    if (iVar3 == 0) goto LAB_14000113d;
    iVar7 = iVar7 + 1;
  } while (iVar7 < 0x20);
  plVar4 = &DAT_140006620;
  iVar7 = iVar8;
  do {
    if (*plVar4 == 0) {
      lVar5 = (longlong)iVar7;
      lVar1 = lVar5 * 0x50;
      *(undefined4 *)(&DAT_140006620 + lVar5 * 10) = 0x400043b0;
      *(undefined4 *)((longlong)&DAT_140006620 + lVar1 + 4) = 1;
      *(undefined4 *)(lVar1 + 0x140006628) = 0x28;
      *(undefined4 *)(lVar1 + 0x14000662c) = 0;
      lVar1 = lVar5 * 0x50;
      *(undefined4 *)(&DAT_140006630 + lVar1) = 0x400020c0;
      *(undefined4 *)(lVar1 + 0x140006634) = 1;
      *(undefined4 *)(lVar1 + 0x140006638) = 0x400020f0;
      *(undefined4 *)(lVar1 + 0x14000663c) = 1;
      lVar1 = lVar5 * 0x50;
      *(undefined4 *)(&DAT_140006640 + lVar1) = 0x400022b0;
      *(undefined4 *)(lVar1 + 0x140006644) = 1;
      *(undefined4 *)(lVar1 + 0x140006648) = 0x40002390;
      *(undefined4 *)(lVar1 + 0x14000664c) = 1;
      lVar1 = lVar5 * 0x50;
      *(undefined4 *)(&DAT_140006650 + lVar1) = 0x40002410;
      *(undefined4 *)(lVar1 + 0x140006654) = 1;
      *(undefined4 *)(lVar1 + 0x140006658) = 0x40002450;
      *(undefined4 *)(lVar1 + 0x14000665c) = 1;
      lVar5 = lVar5 * 0x50;
      *(undefined4 *)(&DAT_140006660 + lVar5) = 0x400024e0;
      *(undefined4 *)(lVar5 + 0x140006664) = 1;
      *(undefined4 *)(lVar5 + 0x140006668) = 0;
      *(undefined4 *)(lVar5 + 0x14000666c) = 0;
LAB_14000113d:
      *param_2 = iVar7;
      if (iVar7 != -1) {
        *(undefined2 *)(param_1 + 0x2e) = 0;
        pauVar10 = (undefined (*) [16])(param_1 + 0x23);
        *pauVar10 = ZEXT816(0);
        *(undefined (*) [16])(param_1 + 0x27) = ZEXT816(0);
        *(undefined8 *)(param_1 + 0x2b) = 0;
        param_1[0x2d] = 0;
        if ((*(short *)(param_1 + 0x2e) == 0) &&
           (uVar6 = FUN_140001ea0(param_1,(undefined4 *)pauVar10), (int)uVar6 == 0)) {
          *(undefined8 *)(param_1 + 0xc) = 0;
          param_1[0xe] = param_1[0x2b];
          param_1[0x20] = 0;
          param_1[0x21] = 8;
          param_1[0xf] = param_1[0x2c];
          *pauVar10 = CONCAT412(extraout_XMM0_Dd,
                                CONCAT48(extraout_XMM0_Dc,
                                         CONCAT44(extraout_XMM0_Db,extraout_XMM0_Da)));
          pauVar10[1] = CONCAT412(extraout_XMM0_Dd,
                                  CONCAT48(extraout_XMM0_Dc,
                                           CONCAT44(extraout_XMM0_Db,extraout_XMM0_Da)));
          *(undefined8 *)pauVar10[2] = 0;
          *(undefined2 *)(param_1 + 0x2e) = 1;
          param_1[0x2d] = 0;
        }
        pbVar9 = local_58;
        do {
          iVar7 = rand();
          cVar2 = (char)iVar8;
          iVar8 = iVar8 + 1;
          *pbVar9 = (char)iVar7 * (cVar2 + '\x01' + *(char *)param_2);
          pbVar9 = pbVar9 + 1;
        } while (iVar8 < 0x28);
        FUN_1400020f0(local_58,0x28,param_1);
        iVar7 = rand();
        _Memory = (undefined8 *)malloc((longlong)(iVar7 % 0x100 + 9));
        if ((_Memory != (undefined8 *)0x0) && (*(short *)(param_1 + 0x2e) != 0)) {
          *_Memory = 0;
          FUN_140001b90(param_1,(uint *)_Memory,8,(uint *)_Memory);
        }
        free(_Memory);
      }
      goto LAB_1400012d7;
    }
    iVar7 = iVar7 + 1;
    plVar4 = plVar4 + 10;
  } while ((longlong)plVar4 < 0x140007020);
  *param_2 = -1;
LAB_1400012d7:
  FUN_140002530(local_30 ^ (ulonglong)auStack_78);
  return;
}



void FUN_1400012f0(undefined8 param_1,undefined8 param_2,undefined8 param_3,uint *param_4)

{
  uint uVar1;
  uint uVar2;
  int iVar3;
  FILE *pFVar4;
  ulonglong uVar5;
  uint *puVar6;
  void *pvVar7;
  longlong lVar8;
  FILE *_File;
  ulonglong uVar9;
  uint uVar10;
  longlong lVar11;
  longlong lVar12;
  ulonglong uVar13;
  undefined auStack_1a8 [32];
  int local_188;
  byte local_184 [4];
  _SYSTEM_INFO local_180;
  uint local_148 [48];
  undefined local_88 [8];
  uint auStack_80 [2];
  undefined local_78 [16];
  undefined local_68 [8];
  uint auStack_60 [2];
  undefined local_58 [16];
  undefined local_48 [8];
  uint auStack_40 [2];
  undefined local_38 [16];
  ulonglong local_28;
  
  local_28 = DAT_140006008 ^ (ulonglong)auStack_1a8;
  pFVar4 = fopen("c_contest_2024.jpg","rb");
  if (pFVar4 != (FILE *)0x0) {
    fclose(pFVar4);
    uVar5 = _time64((__time64_t *)0x0);
    srand((uint)uVar5 & 0xf0f0f0f0);
    GetSystemInfo(&local_180);
    uVar13 = (ulonglong)(local_180.dwNumberOfProcessors + 0x10) * 0x44f0;
    uVar9 = uVar13 & 0xffffffff;
    if ((int)(uVar13 >> 0x20) != 0) {
      uVar9 = 0xffffffffffffffff;
    }
    puVar6 = (uint *)malloc(uVar9);
    uVar13 = (ulonglong)(local_180.dwNumberOfProcessors + 0x10) * 4;
    uVar9 = uVar13 & 0xffffffff;
    if ((int)(uVar13 >> 0x20) != 0) {
      uVar9 = 0xffffffffffffffff;
    }
    pvVar7 = malloc(uVar9);
    iVar3 = FUN_140001070(local_148,&local_188);
    if (iVar3 != 0) {
      uVar10 = 0;
      lVar11 = 0;
      do {
        iVar3 = FUN_140001070(puVar6 + (longlong)(int)uVar10 * 0x2f,
                              (int *)((longlong)pvVar7 + (longlong)(int)uVar10 * 4));
        if (iVar3 == 0) goto LAB_14000164d;
        uVar10 = uVar10 + 1;
      } while (uVar10 < 0x10);
      if ((puVar6 != (uint *)0x0) && (*(short *)(puVar6 + 0x2e) != 0)) {
        _local_68 = ZEXT816(0);
        param_4 = (uint *)local_68;
        param_3 = 0x40;
        local_58 = _local_68;
        _local_48 = _local_68;
        local_38 = _local_68;
        FUN_140001b90(puVar6,(uint *)local_68,0x40,param_4);
      }
      lVar12 = 0x10;
      do {
        lVar8 = lVar11;
        if ((puVar6 != (uint *)0x0) && (*(short *)(puVar6 + 0x2e) != 0)) {
          _local_88 = ZEXT816(0);
          param_4 = (uint *)local_88;
          param_3 = 0x20;
          local_78 = _local_88;
          FUN_140001b90(puVar6,(uint *)local_88,0x20,param_4);
        }
        do {
          uVar10 = *(uint *)(local_88 + lVar8 + 4);
          uVar1 = *(uint *)(local_88 + lVar8 + 8);
          uVar2 = *(uint *)(local_88 + lVar8 + 0xc);
          *(uint *)(local_68 + lVar8) = *(uint *)(local_88 + lVar8) ^ *(uint *)(local_68 + lVar8);
          *(uint *)(local_68 + lVar8 + 4) = uVar10 ^ *(uint *)(local_68 + lVar8 + 4);
          *(uint *)(local_68 + lVar8 + 8) = uVar1 ^ *(uint *)(local_68 + lVar8 + 8);
          *(uint *)(local_68 + lVar8 + 0xc) = uVar2 ^ *(uint *)(local_68 + lVar8 + 0xc);
          lVar8 = lVar8 + 0x10;
        } while (lVar8 < 0x20);
        lVar8 = lVar11;
        if ((puVar6 != (uint *)0x0) && (*(short *)(puVar6 + 0x2e) != 0)) {
          _local_88 = ZEXT816(0);
          param_4 = (uint *)local_88;
          param_3 = 0x20;
          local_78 = _local_88;
          FUN_140001b90(puVar6,(uint *)local_88,0x20,param_4);
        }
        do {
          uVar10 = *(uint *)(local_88 + lVar8 + 4);
          uVar1 = *(uint *)(local_88 + lVar8 + 8);
          uVar2 = *(uint *)(local_88 + lVar8 + 0xc);
          *(uint *)(local_48 + lVar8) = *(uint *)(local_88 + lVar8) ^ *(uint *)(local_48 + lVar8);
          *(uint *)(local_48 + lVar8 + 4) = uVar10 ^ *(uint *)(local_48 + lVar8 + 4);
          *(uint *)(local_48 + lVar8 + 8) = uVar1 ^ *(uint *)(local_48 + lVar8 + 8);
          *(uint *)(local_48 + lVar8 + 0xc) = uVar2 ^ *(uint *)(local_48 + lVar8 + 0xc);
          lVar8 = lVar8 + 0x10;
        } while (lVar8 < 0x20);
        puVar6 = puVar6 + 0x2f;
        lVar12 = lVar12 + -1;
      } while (lVar12 != 0);
      FUN_140001010(&DAT_140004308,uVar5 & 0xffffffff,param_3,param_4);
      do {
        FUN_140001010("%02X ",(ulonglong)(byte)local_68[lVar11],param_3,param_4);
        lVar11 = lVar11 + 1;
      } while (lVar11 < 0x40);
      puts("");
      pFVar4 = fopen("c_contest_2024.jpg","rb");
      _File = fopen("c_contest_2024_out.jpg","wb");
      if ((pFVar4 != (FILE *)0x0) && (_File != (FILE *)0x0)) {
        fseek(pFVar4,0,2);
        uVar10 = ftell(pFVar4);
        uVar13 = (ulonglong)uVar10;
        fseek(pFVar4,0,0);
        if (0 < (int)uVar10) {
          do {
            fread(local_184,1,1,pFVar4);
            uVar10 = rand();
            uVar10 = uVar10 & 0x8000003f;
            if ((int)uVar10 < 0) {
              uVar10 = (uVar10 - 1 | 0xffffffc0) + 1;
            }
            local_184[0] = local_184[0] ^ local_68[(int)uVar10];
            fwrite(local_184,1,1,_File);
            uVar13 = uVar13 - 1;
          } while (uVar13 != 0);
        }
        fclose(pFVar4);
        fclose(_File);
      }
    }
  }
LAB_14000164d:
  FUN_140002530(local_28 ^ (ulonglong)auStack_1a8);
  return;
}



// WARNING: Could not reconcile some variable overlaps

void FUN_140001670(undefined *param_1,uint *param_2,int param_3)

{
  uint uVar1;
  uint uVar2;
  uint uVar3;
  uint uVar4;
  uint uVar5;
  uint uVar6;
  uint uVar7;
  uint uVar8;
  uint uVar9;
  uint uVar10;
  uint uVar11;
  uint uVar12;
  uint uVar13;
  uint local_d8;
  uint local_d4;
  uint local_d0;
  uint local_cc;
  int local_c8;
  uint local_c4;
  uint local_c0;
  uint local_bc;
  uint local_b8;
  uint local_b4;
  uint local_b0;
  uint local_ac;
  uint local_a8;
  uint local_a4;
  ulonglong local_a0;
  undefined *local_98;
  uint *local_90;
  undefined4 local_88;
  undefined4 uStack_84;
  undefined4 uStack_80;
  undefined4 uStack_7c;
  undefined4 local_78;
  undefined4 uStack_74;
  undefined4 uStack_70;
  undefined4 uStack_6c;
  undefined4 local_68;
  undefined4 uStack_64;
  undefined4 uStack_60;
  undefined4 uStack_5c;
  undefined4 local_58;
  undefined4 uStack_54;
  undefined4 uStack_50;
  undefined4 uStack_4c;
  ulonglong local_48;
  
  local_48 = DAT_140006008 ^ (ulonglong)&local_d8;
  uVar12 = param_2[4];
  uVar4 = param_2[5];
  uVar5 = param_2[6];
  uVar6 = param_2[7];
  uVar2 = *param_2;
  local_d8 = param_2[1];
  local_d4 = param_2[2];
  local_d0 = param_2[3];
  uVar7 = param_2[0xc];
  uVar9 = param_2[0xd];
  uVar11 = param_2[0xe];
  uVar3 = param_2[0xf];
  local_c4 = param_2[8];
  uVar1 = param_2[9];
  uVar10 = param_2[10];
  uVar8 = param_2[0xb];
  if (0 < param_3) {
    local_a0 = (ulonglong)((param_3 - 1U >> 1) + 1);
    local_c0 = uVar10;
    local_bc = uVar8;
    do {
      uVar7 = uVar2 + uVar12 ^ uVar7;
      uVar8 = uVar7 << 0x10 | uVar7 >> 0x10;
      local_ac = uVar8 + local_c4;
      uVar10 = local_ac ^ uVar12;
      uVar10 = uVar10 << 0xc | uVar10 >> 0x14;
      uVar2 = uVar10 + uVar2 + uVar12;
      uVar8 = uVar2 ^ uVar8;
      uVar13 = uVar8 << 8 | uVar8 >> 0x18;
      local_ac = local_ac + uVar13;
      uVar10 = local_ac ^ uVar10;
      local_a8 = uVar10 << 7 | uVar10 >> 0x19;
      uVar9 = local_d8 + uVar4 ^ uVar9;
      uVar10 = uVar9 << 0x10 | uVar9 >> 0x10;
      uVar1 = uVar10 + uVar1;
      uVar8 = uVar1 ^ uVar4;
      uVar8 = uVar8 << 0xc | uVar8 >> 0x14;
      local_d8 = uVar8 + local_d8 + uVar4;
      uVar10 = local_d8 ^ uVar10;
      local_b0 = uVar10 << 8 | uVar10 >> 0x18;
      uVar1 = local_b0 + uVar1;
      uVar8 = uVar1 ^ uVar8;
      uVar7 = uVar8 << 7 | uVar8 >> 0x19;
      uVar11 = local_d4 + uVar5 ^ uVar11;
      uVar12 = uVar11 << 0x10 | uVar11 >> 0x10;
      uVar10 = local_c0 + uVar12;
      uVar8 = uVar10 ^ uVar5;
      uVar9 = uVar8 << 0xc | uVar8 >> 0x14;
      local_d4 = local_d4 + uVar5 + uVar9;
      uVar12 = uVar12 ^ local_d4;
      uVar3 = uVar3 ^ local_d0 + uVar6;
      local_a4 = uVar12 << 8 | uVar12 >> 0x18;
      uVar12 = uVar3 << 0x10 | uVar3 >> 0x10;
      uVar10 = local_a4 + uVar10;
      uVar8 = local_bc + uVar12;
      uVar9 = uVar10 ^ uVar9;
      uVar4 = uVar6 ^ uVar8;
      uVar9 = uVar9 << 7 | uVar9 >> 0x19;
      uVar5 = uVar4 << 0xc | uVar4 >> 0x14;
      local_d0 = local_d0 + uVar6 + uVar5;
      uVar2 = uVar7 + uVar2;
      uVar12 = local_d0 ^ uVar12;
      uVar12 = uVar12 << 8 | uVar12 >> 0x18;
      uVar8 = uVar12 + uVar8;
      uVar12 = uVar2 ^ uVar12;
      uVar5 = uVar8 ^ uVar5;
      uVar4 = uVar12 << 0x10 | uVar12 >> 0x10;
      uVar6 = uVar5 << 7 | uVar5 >> 0x19;
      uVar10 = uVar4 + uVar10;
      uVar7 = uVar7 ^ uVar10;
      uVar12 = uVar7 << 0xc | uVar7 >> 0x14;
      uVar2 = uVar12 + uVar2;
      uVar4 = uVar2 ^ uVar4;
      uVar3 = uVar4 << 8 | uVar4 >> 0x18;
      uVar10 = uVar3 + uVar10;
      uVar12 = uVar10 ^ uVar12;
      uVar4 = uVar12 << 7 | uVar12 >> 0x19;
      local_d8 = local_d8 + uVar9;
      uVar13 = uVar13 ^ local_d8;
      uVar12 = uVar13 << 0x10 | uVar13 >> 0x10;
      uVar8 = uVar8 + uVar12;
      uVar9 = uVar8 ^ uVar9;
      uVar5 = uVar9 << 0xc | uVar9 >> 0x14;
      local_d8 = uVar5 + local_d8;
      local_d4 = uVar6 + local_d4;
      uVar7 = local_b0 ^ local_d4;
      uVar12 = local_d8 ^ uVar12;
      uVar9 = uVar7 << 0x10 | uVar7 >> 0x10;
      uVar7 = uVar12 << 8 | uVar12 >> 0x18;
      uVar8 = uVar8 + uVar7;
      local_c4 = local_ac + uVar9;
      uVar5 = uVar5 ^ uVar8;
      uVar6 = local_c4 ^ uVar6;
      uVar5 = uVar5 << 7 | uVar5 >> 0x19;
      uVar6 = uVar6 << 0xc | uVar6 >> 0x14;
      local_d4 = uVar6 + local_d4;
      local_d0 = local_a8 + local_d0;
      uVar9 = local_d4 ^ uVar9;
      uVar9 = uVar9 << 8 | uVar9 >> 0x18;
      local_c4 = local_c4 + uVar9;
      uVar12 = local_d0 ^ local_a4;
      uVar6 = local_c4 ^ uVar6;
      uVar12 = uVar12 << 0x10 | uVar12 >> 0x10;
      uVar1 = uVar1 + uVar12;
      uVar6 = uVar6 << 7 | uVar6 >> 0x19;
      uVar11 = local_a8 ^ uVar1;
      uVar13 = uVar11 << 0xc | uVar11 >> 0x14;
      local_d0 = uVar13 + local_d0;
      uVar12 = local_d0 ^ uVar12;
      uVar11 = uVar12 << 8 | uVar12 >> 0x18;
      uVar1 = uVar1 + uVar11;
      uVar13 = uVar13 ^ uVar1;
      uVar12 = uVar13 << 7 | uVar13 >> 0x19;
      local_a0 = local_a0 - 1;
      local_cc = uVar3;
      local_c0 = uVar10;
      local_bc = uVar8;
      local_b8 = uVar4;
      local_b4 = uVar5;
    } while (local_a0 != 0);
  }
  local_c8 = uVar2 + *param_2;
  local_88._3_1_ = (undefined)((uint)local_c8 >> 0x18);
  param_1[3] = local_88._3_1_;
  local_88._2_1_ = (undefined)((uint)local_c8 >> 0x10);
  param_1[2] = local_88._2_1_;
  local_88._1_1_ = (undefined)((uint)local_c8 >> 8);
  param_1[1] = local_88._1_1_;
  *param_1 = (char)local_c8;
  local_d8 = local_d8 + param_2[1];
  uStack_84._3_1_ = (undefined)(local_d8 >> 0x18);
  param_1[7] = uStack_84._3_1_;
  uStack_84._2_1_ = (undefined)(local_d8 >> 0x10);
  param_1[6] = uStack_84._2_1_;
  uStack_84._1_1_ = (undefined)(local_d8 >> 8);
  param_1[5] = uStack_84._1_1_;
  param_1[4] = (char)local_d8;
  local_d4 = local_d4 + param_2[2];
  uStack_80._3_1_ = (undefined)(local_d4 >> 0x18);
  param_1[0xb] = uStack_80._3_1_;
  uStack_80._2_1_ = (undefined)(local_d4 >> 0x10);
  param_1[10] = uStack_80._2_1_;
  uStack_80._1_1_ = (undefined)(local_d4 >> 8);
  param_1[9] = uStack_80._1_1_;
  param_1[8] = (char)local_d4;
  local_d0 = local_d0 + param_2[3];
  uStack_7c._3_1_ = (undefined)(local_d0 >> 0x18);
  param_1[0xf] = uStack_7c._3_1_;
  uStack_7c._2_1_ = (undefined)(local_d0 >> 0x10);
  param_1[0xe] = uStack_7c._2_1_;
  uStack_7c._1_1_ = (undefined)(local_d0 >> 8);
  param_1[0xd] = uStack_7c._1_1_;
  param_1[0xc] = (char)local_d0;
  local_78 = uVar12 + param_2[4];
  local_78._3_1_ = (undefined)((uint)local_78 >> 0x18);
  param_1[0x13] = local_78._3_1_;
  local_78._2_1_ = (undefined)((uint)local_78 >> 0x10);
  param_1[0x12] = local_78._2_1_;
  local_78._1_1_ = (undefined)((uint)local_78 >> 8);
  param_1[0x11] = local_78._1_1_;
  param_1[0x10] = (char)local_78;
  uStack_74 = uVar4 + param_2[5];
  uStack_74._3_1_ = (undefined)((uint)uStack_74 >> 0x18);
  param_1[0x17] = uStack_74._3_1_;
  uStack_74._2_1_ = (undefined)((uint)uStack_74 >> 0x10);
  param_1[0x16] = uStack_74._2_1_;
  uStack_74._1_1_ = (undefined)((uint)uStack_74 >> 8);
  param_1[0x15] = uStack_74._1_1_;
  param_1[0x14] = (char)uStack_74;
  uStack_70 = uVar5 + param_2[6];
  uStack_70._3_1_ = (undefined)((uint)uStack_70 >> 0x18);
  param_1[0x1b] = uStack_70._3_1_;
  uStack_70._2_1_ = (undefined)((uint)uStack_70 >> 0x10);
  param_1[0x1a] = uStack_70._2_1_;
  uStack_70._1_1_ = (undefined)((uint)uStack_70 >> 8);
  param_1[0x19] = uStack_70._1_1_;
  param_1[0x18] = (char)uStack_70;
  uStack_6c = uVar6 + param_2[7];
  uStack_6c._3_1_ = (undefined)((uint)uStack_6c >> 0x18);
  param_1[0x1f] = uStack_6c._3_1_;
  uStack_6c._2_1_ = (undefined)((uint)uStack_6c >> 0x10);
  param_1[0x1e] = uStack_6c._2_1_;
  uStack_6c._1_1_ = (undefined)((uint)uStack_6c >> 8);
  param_1[0x1d] = uStack_6c._1_1_;
  param_1[0x1c] = (char)uStack_6c;
  local_68 = local_c4 + param_2[8];
  local_68._3_1_ = (undefined)((uint)local_68 >> 0x18);
  param_1[0x23] = local_68._3_1_;
  local_68._2_1_ = (undefined)((uint)local_68 >> 0x10);
  param_1[0x22] = local_68._2_1_;
  local_68._1_1_ = (undefined)((uint)local_68 >> 8);
  param_1[0x21] = local_68._1_1_;
  param_1[0x20] = (char)local_68;
  uStack_64 = uVar1 + param_2[9];
  uStack_64._3_1_ = (undefined)((uint)uStack_64 >> 0x18);
  param_1[0x27] = uStack_64._3_1_;
  uStack_64._2_1_ = (undefined)((uint)uStack_64 >> 0x10);
  param_1[0x26] = uStack_64._2_1_;
  uStack_64._1_1_ = (undefined)((uint)uStack_64 >> 8);
  param_1[0x25] = uStack_64._1_1_;
  param_1[0x24] = (char)uStack_64;
  uStack_60 = uVar10 + param_2[10];
  uStack_60._3_1_ = (undefined)((uint)uStack_60 >> 0x18);
  param_1[0x2b] = uStack_60._3_1_;
  uStack_60._2_1_ = (undefined)((uint)uStack_60 >> 0x10);
  param_1[0x2a] = uStack_60._2_1_;
  uStack_60._1_1_ = (undefined)((uint)uStack_60 >> 8);
  param_1[0x29] = uStack_60._1_1_;
  param_1[0x28] = (char)uStack_60;
  uStack_5c = uVar8 + param_2[0xb];
  uStack_5c._3_1_ = (undefined)((uint)uStack_5c >> 0x18);
  param_1[0x2f] = uStack_5c._3_1_;
  uStack_5c._2_1_ = (undefined)((uint)uStack_5c >> 0x10);
  param_1[0x2e] = uStack_5c._2_1_;
  uStack_5c._1_1_ = (undefined)((uint)uStack_5c >> 8);
  param_1[0x2d] = uStack_5c._1_1_;
  param_1[0x2c] = (char)uStack_5c;
  local_58 = uVar7 + param_2[0xc];
  local_58._3_1_ = (undefined)((uint)local_58 >> 0x18);
  param_1[0x33] = local_58._3_1_;
  local_58._2_1_ = (undefined)((uint)local_58 >> 0x10);
  param_1[0x32] = local_58._2_1_;
  local_58._1_1_ = (undefined)((uint)local_58 >> 8);
  param_1[0x31] = local_58._1_1_;
  param_1[0x30] = (char)local_58;
  uStack_54 = uVar9 + param_2[0xd];
  uStack_54._3_1_ = (undefined)((uint)uStack_54 >> 0x18);
  param_1[0x37] = uStack_54._3_1_;
  uStack_54._2_1_ = (undefined)((uint)uStack_54 >> 0x10);
  param_1[0x36] = uStack_54._2_1_;
  uStack_54._1_1_ = (undefined)((uint)uStack_54 >> 8);
  param_1[0x35] = uStack_54._1_1_;
  param_1[0x34] = (char)uStack_54;
  uStack_50 = uVar11 + param_2[0xe];
  uStack_50._3_1_ = (undefined)((uint)uStack_50 >> 0x18);
  param_1[0x3b] = uStack_50._3_1_;
  uStack_50._2_1_ = (undefined)((uint)uStack_50 >> 0x10);
  param_1[0x3a] = uStack_50._2_1_;
  uStack_50._1_1_ = (undefined)((uint)uStack_50 >> 8);
  param_1[0x39] = uStack_50._1_1_;
  param_1[0x38] = (char)uStack_50;
  uStack_4c = uVar3 + param_2[0xf];
  uStack_4c._3_1_ = (undefined)((uint)uStack_4c >> 0x18);
  param_1[0x3f] = uStack_4c._3_1_;
  uStack_4c._2_1_ = (undefined)((uint)uStack_4c >> 0x10);
  param_1[0x3e] = uStack_4c._2_1_;
  uStack_4c._1_1_ = (undefined)((uint)uStack_4c >> 8);
  param_1[0x3d] = uStack_4c._1_1_;
  param_1[0x3c] = (char)uStack_4c;
  local_98 = param_1;
  local_90 = param_2;
  local_88 = local_c8;
  uStack_84 = local_d8;
  uStack_80 = local_d4;
  uStack_7c = local_d0;
  FUN_140002530(local_48 ^ (ulonglong)&local_d8);
  return;
}



void FUN_140001b90(uint *param_1,uint *param_2,uint param_3,uint *param_4)

{
  uint uVar1;
  uint uVar2;
  uint uVar3;
  uint uVar4;
  uint uVar5;
  uint uVar6;
  uint uVar7;
  uint uVar8;
  uint uVar9;
  uint uVar10;
  uint uVar11;
  uint uVar12;
  uint *puVar13;
  ulonglong uVar14;
  byte *pbVar15;
  uint uVar16;
  uint *puVar17;
  ulonglong uVar18;
  longlong lVar19;
  ulonglong uVar20;
  undefined auStack_98 [32];
  uint local_78 [7];
  uint uStack_5c;
  uint local_58;
  uint uStack_54;
  uint uStack_50;
  uint uStack_4c;
  uint local_48;
  uint uStack_44;
  uint uStack_40;
  undefined auStack_3c [4];
  ulonglong local_38;
  
  local_38 = DAT_140006008 ^ (ulonglong)auStack_98;
  uVar18 = (ulonglong)param_3;
  if (param_3 == 0) goto LAB_140001e6f;
  uVar11 = param_1[0x20];
  uVar20 = uVar18;
  if (uVar11 != 0) {
    if (uVar11 < param_3) {
      uVar18 = (ulonglong)uVar11;
LAB_140001be6:
      uVar12 = (uint)uVar18;
      puVar17 = param_4;
      uVar20 = uVar18;
      do {
        *(byte *)puVar17 =
             *(byte *)((ulonglong)(0x40 - uVar11) + 0x40 + (longlong)param_1) ^
             *(byte *)((longlong)param_2 + (-1 - (longlong)param_4) +
                      (longlong)(uint *)((longlong)puVar17 + 1));
        param_1[0x20] = param_1[0x20] - 1;
        uVar11 = param_1[0x20];
        uVar20 = uVar20 - 1;
        puVar17 = (uint *)((longlong)puVar17 + 1);
      } while (uVar20 != 0);
    }
    else {
      uVar12 = param_3;
      if (param_3 != 0) goto LAB_140001be6;
    }
    uVar20 = (ulonglong)(param_3 - uVar12);
    if (param_3 - uVar12 == 0) goto LAB_140001e6f;
    param_4 = (uint *)((longlong)param_4 + uVar18);
    param_2 = (uint *)((longlong)param_2 + uVar18);
  }
  puVar17 = (uint *)((longlong)param_4 + 0x3f);
LAB_140001c40:
  FUN_140001670((undefined *)local_78,param_1,param_1[0x22]);
  uVar11 = param_1[0xc] + 1;
  param_1[0xc] = uVar11;
  if (param_1[0x21] == 8) {
    if (uVar11 == 0) {
      puVar13 = param_1 + 0xd;
      *puVar13 = *puVar13 + 1;
      uVar11 = *puVar13;
      goto LAB_140001c71;
    }
  }
  else {
LAB_140001c71:
    if (uVar11 == 0) goto LAB_140001e6f;
  }
  uVar11 = (uint)uVar20;
  if (0x40 < uVar11) {
    if (((auStack_3c + 3 < param_4) || (puVar17 < local_78)) &&
       (((uint *)((longlong)param_2 + 0x3fU) < param_4 || (puVar17 < param_2)))) {
      uVar12 = param_2[1];
      uVar1 = param_2[2];
      uVar2 = param_2[3];
      uVar3 = param_2[4];
      uVar4 = param_2[5];
      uVar5 = param_2[6];
      uVar6 = param_2[7];
      *param_4 = *param_2 ^ local_78[0];
      param_4[1] = uVar12 ^ local_78[1];
      param_4[2] = uVar1 ^ local_78[2];
      param_4[3] = uVar2 ^ local_78[3];
      uVar12 = param_2[8];
      uVar1 = param_2[9];
      uVar2 = param_2[10];
      uVar7 = param_2[0xb];
      *(uint *)((longlong)puVar17 + -0x2f) = uVar3 ^ local_78[4];
      *(uint *)((longlong)puVar17 + -0x2b) = uVar4 ^ local_78[5];
      *(uint *)((longlong)puVar17 + -0x27) = uVar5 ^ local_78[6];
      *(uint *)((longlong)puVar17 + -0x23) = uVar6 ^ uStack_5c;
      uVar3 = param_2[0xc];
      uVar4 = param_2[0xd];
      uVar5 = param_2[0xe];
      uVar6 = param_2[0xf];
      *(uint *)((longlong)puVar17 + -0x1f) = uVar12 ^ local_58;
      *(uint *)((longlong)puVar17 + -0x1b) = uVar1 ^ uStack_54;
      *(uint *)((longlong)puVar17 + -0x17) = uVar2 ^ uStack_50;
      *(uint *)((longlong)puVar17 + -0x13) = uVar7 ^ uStack_4c;
      *(uint *)((longlong)puVar17 + -0xf) = uVar3 ^ local_48;
      *(uint *)((longlong)puVar17 + -0xb) = uVar4 ^ uStack_44;
      *(uint *)((longlong)puVar17 + -7) = uVar5 ^ uStack_40;
      *(uint *)((longlong)puVar17 + -3) = uVar6 ^ (uint)auStack_3c;
      uVar20 = (ulonglong)(uVar11 - 0x40);
      param_4 = param_4 + 0x10;
      puVar17 = puVar17 + 0x10;
      param_2 = param_2 + 0x10;
    }
    else {
      puVar13 = local_78;
      lVar19 = 0x40;
      do {
        *(byte *)(((longlong)puVar17 - (longlong)(auStack_3c + 3)) + (longlong)puVar13) =
             ((byte *)((longlong)puVar13 + (0x10 - (longlong)(local_78 + 4))))[(longlong)param_2] ^
             *(byte *)puVar13;
        puVar13 = (uint *)((longlong)puVar13 + 1);
        lVar19 = lVar19 + -1;
      } while (lVar19 != 0);
      uVar20 = (ulonglong)(uVar11 - 0x40);
      param_4 = param_4 + 0x10;
      puVar17 = puVar17 + 0x10;
      param_2 = param_2 + 0x10;
    }
    goto LAB_140001c40;
  }
  uVar18 = 0;
  if (uVar11 != 0) {
    if (0x3f < uVar11) {
      uVar12 = uVar11 - 1;
      if ((((uint *)((longlong)local_78 + (ulonglong)uVar12) < param_4) ||
          ((uint *)((ulonglong)uVar12 + (longlong)param_4) < local_78)) &&
         (((uint *)((ulonglong)uVar12 + (longlong)param_2) < param_4 ||
          ((uint *)((ulonglong)uVar12 + (longlong)param_4) < param_2)))) {
        uVar12 = 0x20;
        do {
          uVar1 = *(uint *)((longlong)local_78 + uVar18 + 4);
          uVar2 = *(uint *)((longlong)local_78 + uVar18 + 8);
          uVar3 = *(uint *)((longlong)local_78 + uVar18 + 0xc);
          uVar14 = (ulonglong)(uVar12 - 0x10);
          puVar17 = (uint *)(uVar18 + (longlong)param_2);
          uVar4 = puVar17[1];
          uVar5 = puVar17[2];
          uVar6 = puVar17[3];
          uVar7 = *(uint *)((longlong)local_78 + uVar14);
          uVar8 = *(uint *)((longlong)local_78 + uVar14 + 4);
          uVar9 = *(uint *)((longlong)local_78 + uVar14 + 8);
          uVar10 = *(uint *)((longlong)local_78 + uVar14 + 0xc);
          puVar13 = (uint *)(uVar18 + (longlong)param_4);
          *puVar13 = *puVar17 ^ *(uint *)((longlong)local_78 + uVar18);
          puVar13[1] = uVar4 ^ uVar1;
          puVar13[2] = uVar5 ^ uVar2;
          puVar13[3] = uVar6 ^ uVar3;
          uVar16 = (int)uVar18 + 0x40;
          uVar18 = (ulonglong)uVar16;
          puVar17 = (uint *)(uVar14 + (longlong)param_2);
          uVar1 = puVar17[1];
          uVar2 = puVar17[2];
          uVar3 = puVar17[3];
          puVar13 = (uint *)(uVar14 + (longlong)param_4);
          *puVar13 = *puVar17 ^ uVar7;
          puVar13[1] = uVar1 ^ uVar8;
          puVar13[2] = uVar2 ^ uVar9;
          puVar13[3] = uVar3 ^ uVar10;
          uVar14 = (ulonglong)uVar12;
          uVar1 = *(uint *)((longlong)local_78 + uVar14 + 4);
          uVar2 = *(uint *)((longlong)local_78 + uVar14 + 8);
          uVar3 = *(uint *)((longlong)local_78 + uVar14 + 0xc);
          puVar17 = (uint *)(uVar14 + (longlong)param_2);
          uVar4 = puVar17[1];
          uVar5 = puVar17[2];
          uVar6 = puVar17[3];
          puVar13 = (uint *)(uVar14 + (longlong)param_4);
          *puVar13 = *puVar17 ^ *(uint *)((longlong)local_78 + uVar14);
          puVar13[1] = uVar4 ^ uVar1;
          puVar13[2] = uVar5 ^ uVar2;
          puVar13[3] = uVar6 ^ uVar3;
          uVar14 = (ulonglong)(uVar12 + 0x10);
          uVar12 = uVar12 + 0x40;
          puVar17 = (uint *)(uVar14 + (longlong)param_2);
          uVar1 = puVar17[1];
          uVar2 = puVar17[2];
          uVar3 = puVar17[3];
          uVar4 = *(uint *)((longlong)local_78 + uVar14 + 4);
          uVar5 = *(uint *)((longlong)local_78 + uVar14 + 8);
          uVar6 = *(uint *)((longlong)local_78 + uVar14 + 0xc);
          puVar13 = (uint *)(uVar14 + (longlong)param_4);
          *puVar13 = *puVar17 ^ *(uint *)((longlong)local_78 + uVar14);
          puVar13[1] = uVar1 ^ uVar4;
          puVar13[2] = uVar2 ^ uVar5;
          puVar13[3] = uVar3 ^ uVar6;
        } while (uVar16 < (uVar11 & 0xffffffc0));
        if (uVar11 <= uVar16) goto LAB_140001e43;
      }
    }
    pbVar15 = (byte *)((longlong)local_78 + uVar18);
    uVar18 = (ulonglong)(uVar11 - (int)uVar18);
    do {
      pbVar15[(longlong)param_4 - (longlong)local_78] =
           pbVar15[(longlong)param_2 - (longlong)local_78] ^ *pbVar15;
      pbVar15 = pbVar15 + 1;
      uVar18 = uVar18 - 1;
    } while (uVar18 != 0);
  }
LAB_140001e43:
  param_1[0x20] = 0x40 - uVar11;
  if (uVar11 < 0x40) {
    memcpy((void *)((longlong)param_1 + uVar20 + 0x40),(void *)((longlong)local_78 + uVar20),
           (ulonglong)(0x40 - uVar11));
  }
LAB_140001e6f:
  FUN_140002530(local_38 ^ (ulonglong)auStack_98);
  return;
}



undefined8 FUN_140001ea0(undefined4 *param_1,undefined4 *param_2)

{
  param_1[4] = *param_2;
  param_1[5] = param_2[1];
  param_1[6] = param_2[2];
  param_1[7] = param_2[3];
  param_1[8] = param_2[4];
  param_1[9] = param_2[5];
  param_1[10] = param_2[6];
  param_1[0xb] = param_2[7];
  *param_1 = 0x61707865;
  param_1[1] = 0x3320646e;
  param_1[2] = 0x79622d32;
  param_1[0x22] = 0x14;
  param_1[0x21] = 0;
  param_1[3] = 0x6b206574;
  return 0;
}



void FUN_1400020f0(byte *param_1,uint param_2,uint *param_3)

{
  byte *pbVar1;
  int iVar2;
  undefined8 uVar3;
  undefined *puVar4;
  longlong lVar5;
  ulonglong uVar6;
  ulonglong uVar7;
  ulonglong uVar8;
  undefined auStack_58 [32];
  undefined local_38 [16];
  undefined local_28 [16];
  undefined8 local_18;
  ulonglong local_10;
  
  local_10 = DAT_140006008 ^ (ulonglong)auStack_58;
  if (*(short *)(param_3 + 0x2e) == 0) {
    if (param_2 != 0) {
      do {
        pbVar1 = (byte *)((ulonglong)param_3[0x2d] % 0x28 + 0x8c + (longlong)param_3);
        *pbVar1 = *pbVar1 ^ *param_1;
        param_3[0x2d] = param_3[0x2d] + 1;
        param_2 = param_2 - 1;
        param_1 = param_1 + 1;
      } while (param_2 != 0);
    }
  }
  else {
    lVar5 = 0x28;
    local_18 = 0;
    local_38 = ZEXT816(0);
    local_28 = ZEXT816(0);
    iVar2 = FUN_140001b90(param_3,(uint *)local_38,0x28,(uint *)local_38);
    if (iVar2 == 0) {
      uVar8 = 0;
      if (param_2 != 0) {
        uVar7 = (ulonglong)param_2;
        uVar6 = uVar8;
        do {
          local_38[uVar6 % 0x28] = local_38[uVar6 % 0x28] ^ *param_1;
          uVar7 = uVar7 - 1;
          param_1 = param_1 + 1;
          uVar6 = uVar6 + 1;
        } while (uVar7 != 0);
      }
      uVar3 = FUN_140001ea0(param_3,(undefined4 *)local_38);
      if ((int)uVar3 == 0) {
        *(ulonglong *)(param_3 + 0xc) = uVar8;
        param_3[0x20] = (uint)uVar8;
        param_3[0x21] = 8;
        param_3[0xe] = (uint)local_18;
        puVar4 = local_38;
        param_3[0xf] = (uint)((ulonglong)local_18 >> 0x20);
        do {
          *puVar4 = (char)uVar8;
          puVar4 = puVar4 + 1;
          lVar5 = lVar5 + -1;
        } while (lVar5 != 0);
      }
    }
  }
  FUN_140002530(local_10 ^ (ulonglong)auStack_58);
  return;
}



undefined8 FUN_1400022b0(undefined4 *param_1)

{
  undefined8 uVar1;
  
  if (*(short *)(param_1 + 0x2e) == 0) {
    uVar1 = FUN_140001ea0(param_1,param_1 + 0x23);
    if ((int)uVar1 == 0) {
      *(undefined8 *)(param_1 + 0xc) = 0;
      param_1[0xe] = param_1[0x2b];
      param_1[0x20] = 0;
      param_1[0x21] = 8;
      param_1[0xf] = param_1[0x2c];
      *(undefined (*) [16])(param_1 + 0x23) = ZEXT816(0);
      *(undefined (*) [16])(param_1 + 0x27) = ZEXT816(0);
      *(undefined8 *)(param_1 + 0x2b) = 0;
      *(undefined2 *)(param_1 + 0x2e) = 1;
      param_1[0x2d] = 0;
    }
  }
  return 0;
}



undefined8 FUN_140002450(undefined (*param_1) [16],uint *param_2,uint *param_3)

{
  int iVar1;
  int iVar2;
  
  if (*param_2 < 0x28) {
    *param_2 = 0x28;
    return 6;
  }
  if (((param_3 != (uint *)0x0) && (param_1 != (undefined (*) [16])0x0)) &&
     (*(short *)(param_3 + 0x2e) != 0)) {
    *param_1 = ZEXT816(0);
    param_1[1] = ZEXT816(0);
    *(undefined8 *)param_1[2] = 0;
    iVar1 = FUN_140001b90(param_3,(uint *)param_1,0x28,(uint *)param_1);
    iVar2 = 0;
    if (iVar1 == 0) {
      iVar2 = 0x28;
    }
    if (iVar2 == 0x28) {
      *param_2 = 0x28;
      return 0;
    }
  }
  return 9;
}



void FUN_140002530(longlong param_1)

{
  if ((param_1 == DAT_140006008) && ((short)((ulonglong)param_1 >> 0x30) == 0)) {
    return;
  }
  FUN_1400027f8();
  return;
}



void FUN_140002550(void)

{
  code *pcVar1;
  bool bVar2;
  char cVar3;
  int iVar4;
  undefined8 uVar5;
  undefined4 *puVar6;
  ulonglong uVar7;
  undefined7 extraout_var;
  
  _set_app_type(1);
  uVar5 = FUN_140002c48();
  _set_fmode((int)uVar5);
  uVar5 = FUN_140002c3c();
  puVar6 = (undefined4 *)__p__commode();
  *puVar6 = (int)uVar5;
  uVar5 = __scrt_initialize_onexit_tables(1);
  if ((char)uVar5 != '\0') {
    FUN_140002ec4();
    atexit(&LAB_140002f00);
    uVar7 = FUN_140002c40();
    iVar4 = _configure_narrow_argv(uVar7 & 0xffffffff);
    if (iVar4 == 0) {
      FUN_140002c50();
      bVar2 = FUN_140002c8c();
      if ((int)CONCAT71(extraout_var,bVar2) != 0) {
        __setusermatherr(FUN_140002c3c);
      }
      _guard_check_icall();
      _guard_check_icall();
      uVar5 = FUN_140002c3c();
      _configthreadlocale((int)uVar5);
      cVar3 = FUN_140002c60();
      if (cVar3 != '\0') {
        _initialize_narrow_environment();
      }
      FUN_140002c3c();
      uVar5 = thunk_FUN_140002c3c();
      if ((int)uVar5 == 0) {
        return;
      }
    }
  }
  FUN_140002cb0(7);
  pcVar1 = (code *)swi(3);
  (*pcVar1)();
  return;
}



undefined8 FUN_140002608(void)

{
  FUN_140002c70();
  return 0;
}



// WARNING: Function: _guard_dispatch_icall replaced with injection: guard_dispatch_icall

uint FUN_140002634(void)

{
  undefined8 uVar1;
  bool bVar2;
  int iVar3;
  ulonglong uVar4;
  code **ppcVar5;
  longlong *plVar6;
  undefined8 uVar7;
  undefined8 *puVar8;
  uint *puVar9;
  ulonglong uVar10;
  uint unaff_EBX;
  uint *in_R9;
  
  uVar4 = __scrt_initialize_crt(1);
  if ((char)uVar4 == '\0') {
    FUN_140002cb0(7);
  }
  else {
    bVar2 = false;
    uVar4 = __scrt_acquire_startup_lock();
    unaff_EBX = unaff_EBX & 0xffffff00 | (uint)(uVar4 & 0xff);
    if (DAT_1400065b0 != 1) {
      if (DAT_1400065b0 == 0) {
        DAT_1400065b0 = 1;
        iVar3 = _initterm_e(&DAT_140004270,&DAT_140004288);
        if (iVar3 != 0) {
          return 0xff;
        }
        _initterm(&DAT_140004258,&DAT_140004268);
        DAT_1400065b0 = 2;
      }
      else {
        bVar2 = true;
      }
      __scrt_release_startup_lock((char)(uVar4 & 0xff));
      ppcVar5 = (code **)FUN_140002c98();
      if ((*ppcVar5 != (code *)0x0) &&
         (uVar4 = FUN_140002a54((longlong)ppcVar5), (char)uVar4 != '\0')) {
        (**ppcVar5)(0,2);
      }
      plVar6 = (longlong *)FUN_140002ca0();
      if ((*plVar6 != 0) && (uVar4 = FUN_140002a54((longlong)plVar6), (char)uVar4 != '\0')) {
        _register_thread_local_exe_atexit_callback(*plVar6);
      }
      uVar7 = _get_initial_narrow_environment();
      puVar8 = (undefined8 *)__p___argv();
      uVar1 = *puVar8;
      puVar9 = (uint *)__p___argc();
      uVar10 = (ulonglong)*puVar9;
      unaff_EBX = FUN_1400012f0(uVar10,uVar1,uVar7,in_R9);
      uVar4 = FUN_140002e04();
      if ((char)uVar4 != '\0') {
        if (!bVar2) {
          _cexit();
        }
        __scrt_uninitialize_crt(CONCAT71((int7)(uVar10 >> 8),1),'\0');
        return unaff_EBX;
      }
      goto LAB_1400027a0;
    }
  }
  FUN_140002cb0(7);
LAB_1400027a0:
                    // WARNING: Subroutine does not return
  exit(unaff_EBX);
}



void entry(void)

{
  __security_init_cookie();
  FUN_140002634();
  return;
}



// Library Function - Single Match
//  __raise_securityfailure
// 
// Libraries: Visual Studio 2015 Release, Visual Studio 2017 Release, Visual Studio 2019 Release

void __raise_securityfailure(_EXCEPTION_POINTERS *param_1)

{
  HANDLE pvVar1;
  
  SetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER)0x0);
  UnhandledExceptionFilter(param_1);
  pvVar1 = GetCurrentProcess();
                    // WARNING: Could not recover jumptable at 0x0001400027f1. Too many branches
                    // WARNING: Treating indirect jump as call
  TerminateProcess(pvVar1,0xc0000409);
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void FUN_1400027f8(void)

{
  code *pcVar1;
  BOOL BVar2;
  undefined *puVar3;
  undefined auStack_38 [8];
  undefined auStack_30 [48];
  
  puVar3 = auStack_38;
  BVar2 = IsProcessorFeaturePresent(0x17);
  if (BVar2 != 0) {
    pcVar1 = (code *)swi(0x29);
    (*pcVar1)(2);
    puVar3 = auStack_30;
  }
  *(undefined8 *)(puVar3 + -8) = 0x140002823;
  capture_previous_context((PCONTEXT)&DAT_1400060e0);
  _DAT_140006050 = *(undefined8 *)(puVar3 + 0x38);
  _DAT_140006178 = puVar3 + 0x40;
  _DAT_140006160 = *(undefined8 *)(puVar3 + 0x40);
  _DAT_140006040 = 0xc0000409;
  _DAT_140006044 = 1;
  _DAT_140006058 = 1;
  DAT_140006060 = 2;
  *(undefined8 *)(puVar3 + 0x20) = DAT_140006008;
  *(undefined8 *)(puVar3 + 0x28) = DAT_140006000;
  *(undefined8 *)(puVar3 + -8) = 0x1400028c5;
  DAT_1400061d8 = _DAT_140006050;
  __raise_securityfailure((_EXCEPTION_POINTERS *)&PTR_DAT_1400042b0);
  return;
}



// Library Function - Single Match
//  capture_previous_context
// 
// Libraries: Visual Studio 2015 Release, Visual Studio 2017 Release, Visual Studio 2019 Release

void capture_previous_context(PCONTEXT param_1)

{
  DWORD64 ControlPc;
  PRUNTIME_FUNCTION FunctionEntry;
  int iVar1;
  DWORD64 local_res8;
  ulonglong local_res10;
  PVOID local_res18 [2];
  
  RtlCaptureContext();
  ControlPc = param_1->Rip;
  iVar1 = 0;
  do {
    FunctionEntry = RtlLookupFunctionEntry(ControlPc,&local_res8,(PUNWIND_HISTORY_TABLE)0x0);
    if (FunctionEntry == (PRUNTIME_FUNCTION)0x0) {
      return;
    }
    RtlVirtualUnwind(0,local_res8,ControlPc,FunctionEntry,param_1,local_res18,&local_res10,
                     (PKNONVOLATILE_CONTEXT_POINTERS)0x0);
    iVar1 = iVar1 + 1;
  } while (iVar1 < 2);
  return;
}



// Library Function - Single Match
//  __scrt_acquire_startup_lock
// 
// Libraries: Visual Studio 2015 Release, Visual Studio 2017 Release, Visual Studio 2019 Release

ulonglong __scrt_acquire_startup_lock(void)

{
  bool bVar1;
  undefined7 extraout_var;
  ulonglong uVar3;
  void *pvVar2;
  
  bVar1 = __scrt_is_ucrt_dll_in_use();
  pvVar2 = (void *)CONCAT71(extraout_var,bVar1);
  if ((int)pvVar2 == 0) {
LAB_14000296e:
    uVar3 = (ulonglong)pvVar2 & 0xffffffffffffff00;
  }
  else {
    do {
      LOCK();
      bVar1 = DAT_1400065b8 == 0;
      DAT_1400065b8 = DAT_1400065b8 ^ (ulonglong)bVar1 * (DAT_1400065b8 ^ (ulonglong)StackBase);
      pvVar2 = (void *)(!bVar1 * DAT_1400065b8);
      if (bVar1) goto LAB_14000296e;
    } while (StackBase != pvVar2);
    uVar3 = CONCAT71((int7)((ulonglong)pvVar2 >> 8),1);
  }
  return uVar3;
}



// Library Function - Single Match
//  __scrt_initialize_crt
// 
// Libraries: Visual Studio 2015 Release, Visual Studio 2017 Release, Visual Studio 2019 Release

ulonglong __scrt_initialize_crt(int param_1)

{
  ulonglong uVar1;
  
  if (param_1 == 0) {
    DAT_1400065c0 = 1;
  }
  FUN_140002f3c();
  uVar1 = FUN_140002c60();
  if ((char)uVar1 != '\0') {
    uVar1 = FUN_140002c60();
    if ((char)uVar1 != '\0') {
      return uVar1 & 0xffffffffffffff00 | 1;
    }
    uVar1 = FUN_140002c60();
  }
  return uVar1 & 0xffffffffffffff00;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// Library Function - Single Match
//  __scrt_initialize_onexit_tables
// 
// Library: Visual Studio 2019 Release

undefined8 __scrt_initialize_onexit_tables(uint param_1)

{
  code *pcVar1;
  bool bVar2;
  ulonglong in_RAX;
  undefined7 extraout_var;
  undefined8 uVar3;
  
  if (DAT_1400065c1 == '\0') {
    if (1 < param_1) {
      FUN_140002cb0(5);
      pcVar1 = (code *)swi(3);
      uVar3 = (*pcVar1)();
      return uVar3;
    }
    bVar2 = __scrt_is_ucrt_dll_in_use();
    if (((int)CONCAT71(extraout_var,bVar2) == 0) || (param_1 != 0)) {
      in_RAX = 0xffffffffffffffff;
      _DAT_1400065c8 = 0xffffffff;
      uRam00000001400065cc = 0xffffffff;
      uRam00000001400065d0 = 0xffffffff;
      uRam00000001400065d4 = 0xffffffff;
      _DAT_1400065d8 = 0xffffffffffffffff;
      _DAT_1400065e0 = 0xffffffff;
      uRam00000001400065e4 = 0xffffffff;
      uRam00000001400065e8 = 0xffffffff;
      uRam00000001400065ec = 0xffffffff;
      _DAT_1400065f0 = 0xffffffffffffffff;
    }
    else {
      in_RAX = _initialize_onexit_table(&DAT_1400065c8);
      if (((int)in_RAX != 0) ||
         (in_RAX = _initialize_onexit_table(&DAT_1400065e0), (int)in_RAX != 0)) {
        return in_RAX & 0xffffffffffffff00;
      }
    }
    DAT_1400065c1 = '\x01';
  }
  return CONCAT71((int7)(in_RAX >> 8),1);
}



// WARNING: Removing unreachable block (ram,0x000140002ae1)

ulonglong FUN_140002a54(longlong param_1)

{
  ulonglong uVar1;
  uint7 uVar2;
  IMAGE_SECTION_HEADER *pIVar3;
  
  uVar1 = 0;
  for (pIVar3 = &IMAGE_SECTION_HEADER_140000208; pIVar3 != (IMAGE_SECTION_HEADER *)&DAT_1400002f8;
      pIVar3 = pIVar3 + 1) {
    if (((ulonglong)(uint)pIVar3->VirtualAddress <= param_1 - 0x140000000U) &&
       (uVar1 = (ulonglong)((pIVar3->Misc).PhysicalAddress + pIVar3->VirtualAddress),
       param_1 - 0x140000000U < uVar1)) goto LAB_140002aca;
  }
  pIVar3 = (IMAGE_SECTION_HEADER *)0x0;
LAB_140002aca:
  if (pIVar3 == (IMAGE_SECTION_HEADER *)0x0) {
    uVar1 = uVar1 & 0xffffffffffffff00;
  }
  else {
    uVar2 = (uint7)(uVar1 >> 8);
    if ((int)pIVar3->Characteristics < 0) {
      uVar1 = (ulonglong)uVar2 << 8;
    }
    else {
      uVar1 = CONCAT71(uVar2,1);
    }
  }
  return uVar1;
}



// Library Function - Single Match
//  __scrt_release_startup_lock
// 
// Libraries: Visual Studio 2015 Release, Visual Studio 2017 Release, Visual Studio 2019 Release

void __scrt_release_startup_lock(char param_1)

{
  bool bVar1;
  undefined3 extraout_var;
  
  bVar1 = __scrt_is_ucrt_dll_in_use();
  if ((CONCAT31(extraout_var,bVar1) != 0) && (param_1 == '\0')) {
    DAT_1400065b8 = 0;
  }
  return;
}



// Library Function - Single Match
//  __scrt_uninitialize_crt
// 
// Library: Visual Studio 2019 Release

undefined __scrt_uninitialize_crt(undefined8 param_1,char param_2)

{
  if ((DAT_1400065c0 == '\0') || (param_2 == '\0')) {
    FUN_140002c60();
    FUN_140002c60();
  }
  return 1;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// Library Function - Single Match
//  _onexit
// 
// Library: Visual Studio 2019 Release

_onexit_t __cdecl _onexit(_onexit_t _Func)

{
  int iVar1;
  _onexit_t p_Var2;
  
  if (_DAT_1400065c8 == -1) {
    iVar1 = _crt_atexit();
  }
  else {
    iVar1 = _register_onexit_function(&DAT_1400065c8);
  }
  p_Var2 = (_onexit_t)0x0;
  if (iVar1 == 0) {
    p_Var2 = _Func;
  }
  return p_Var2;
}



// Library Function - Single Match
//  atexit
// 
// Library: Visual Studio 2019 Release

int __cdecl atexit(void *param_1)

{
  _onexit_t p_Var1;
  
  p_Var1 = _onexit((_onexit_t)param_1);
  return (p_Var1 != (_onexit_t)0x0) - 1;
}



// Library Function - Single Match
//  __security_init_cookie
// 
// Libraries: Visual Studio 2017 Release, Visual Studio 2019 Release

void __cdecl __security_init_cookie(void)

{
  DWORD DVar1;
  _FILETIME local_res8;
  _FILETIME local_res10;
  uint local_res18;
  undefined4 uStackX_1c;
  
  if (DAT_140006008 == 0x2b992ddfa232) {
    local_res10 = (_FILETIME)0x0;
    GetSystemTimeAsFileTime(&local_res10);
    local_res8 = local_res10;
    DVar1 = GetCurrentThreadId();
    local_res8 = (_FILETIME)((ulonglong)local_res8 ^ (ulonglong)DVar1);
    DVar1 = GetCurrentProcessId();
    local_res8 = (_FILETIME)((ulonglong)local_res8 ^ (ulonglong)DVar1);
    QueryPerformanceCounter((LARGE_INTEGER *)&local_res18);
    DAT_140006008 =
         ((ulonglong)local_res18 << 0x20 ^ CONCAT44(uStackX_1c,local_res18) ^ (ulonglong)local_res8
         ^ (ulonglong)&local_res8) & 0xffffffffffff;
    if (DAT_140006008 == 0x2b992ddfa232) {
      DAT_140006008 = 0x2b992ddfa233;
    }
  }
  DAT_140006000 = ~DAT_140006008;
  return;
}



undefined8 FUN_140002c3c(void)

{
  return 0;
}



undefined8 FUN_140002c40(void)

{
  return 1;
}



undefined8 FUN_140002c48(void)

{
  return 0x4000;
}



void FUN_140002c50(void)

{
                    // WARNING: Could not recover jumptable at 0x000140002c57. Too many branches
                    // WARNING: Treating indirect jump as call
  InitializeSListHead(&DAT_140006600);
  return;
}



undefined FUN_140002c60(void)

{
  return 1;
}



void _guard_check_icall(void)

{
  return;
}



undefined * FUN_140002c68(void)

{
  return &DAT_140006610;
}



void FUN_140002c70(void)

{
  ulonglong *puVar1;
  
  puVar1 = (ulonglong *)FUN_140001000();
  *puVar1 = *puVar1 | 0x24;
  puVar1 = (ulonglong *)FUN_140002c68();
  *puVar1 = *puVar1 | 2;
  return;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

bool FUN_140002c8c(void)

{
  return _DAT_140006014 == 0;
}



undefined * FUN_140002c98(void)

{
  return &DAT_140007028;
}



undefined * FUN_140002ca0(void)

{
  return &DAT_140007020;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address

void FUN_140002ca8(void)

{
  _DAT_140006618 = 0;
  return;
}



void FUN_140002cb0(undefined4 param_1)

{
  code *pcVar1;
  BOOL BVar2;
  LONG LVar3;
  PRUNTIME_FUNCTION FunctionEntry;
  undefined *puVar4;
  undefined8 unaff_retaddr;
  DWORD64 local_res10;
  undefined local_res18 [8];
  undefined local_res20 [8];
  undefined auStack_5c8 [8];
  undefined auStack_5c0 [232];
  undefined local_4d8 [152];
  undefined *local_440;
  DWORD64 local_3e0;
  
  puVar4 = auStack_5c8;
  BVar2 = IsProcessorFeaturePresent(0x17);
  if (BVar2 != 0) {
    pcVar1 = (code *)swi(0x29);
    (*pcVar1)(param_1);
    puVar4 = auStack_5c0;
  }
  *(undefined8 *)(puVar4 + -8) = 0x140002ce4;
  FUN_140002ca8();
  *(undefined8 *)(puVar4 + -8) = 0x140002cf5;
  memset(local_4d8,0,0x4d0);
  *(undefined8 *)(puVar4 + -8) = 0x140002cff;
  RtlCaptureContext(local_4d8);
  *(undefined8 *)(puVar4 + -8) = 0x140002d19;
  FunctionEntry = RtlLookupFunctionEntry(local_3e0,&local_res10,(PUNWIND_HISTORY_TABLE)0x0);
  if (FunctionEntry != (PRUNTIME_FUNCTION)0x0) {
    *(undefined8 *)(puVar4 + 0x38) = 0;
    *(undefined **)(puVar4 + 0x30) = local_res18;
    *(undefined **)(puVar4 + 0x28) = local_res20;
    *(undefined **)(puVar4 + 0x20) = local_4d8;
    *(undefined8 *)(puVar4 + -8) = 0x140002d5a;
    RtlVirtualUnwind(0,local_res10,local_3e0,FunctionEntry,*(PCONTEXT *)(puVar4 + 0x20),
                     *(PVOID **)(puVar4 + 0x28),*(PDWORD64 *)(puVar4 + 0x30),
                     *(PKNONVOLATILE_CONTEXT_POINTERS *)(puVar4 + 0x38));
  }
  local_440 = &stack0x00000008;
  *(undefined8 *)(puVar4 + -8) = 0x140002d8c;
  memset(puVar4 + 0x50,0,0x98);
  *(undefined8 *)(puVar4 + 0x60) = unaff_retaddr;
  *(undefined4 *)(puVar4 + 0x50) = 0x40000015;
  *(undefined4 *)(puVar4 + 0x54) = 1;
  *(undefined8 *)(puVar4 + -8) = 0x140002dae;
  BVar2 = IsDebuggerPresent();
  *(undefined **)(puVar4 + 0x40) = puVar4 + 0x50;
  *(undefined **)(puVar4 + 0x48) = local_4d8;
  *(undefined8 *)(puVar4 + -8) = 0x140002dcf;
  SetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER)0x0);
  *(undefined8 *)(puVar4 + -8) = 0x140002dda;
  LVar3 = UnhandledExceptionFilter((_EXCEPTION_POINTERS *)(puVar4 + 0x40));
  if ((LVar3 == 0) && (BVar2 != 1)) {
    *(undefined8 *)(puVar4 + -8) = 0x140002dea;
    FUN_140002ca8();
  }
  return;
}



undefined8 thunk_FUN_140002c3c(void)

{
  return 0;
}



ulonglong FUN_140002e04(void)

{
  HMODULE pHVar1;
  ulonglong uVar2;
  int *piVar3;
  
  pHVar1 = GetModuleHandleW((LPCWSTR)0x0);
  if ((((pHVar1 == (HMODULE)0x0) || (*(short *)&pHVar1->unused != 0x5a4d)) ||
      (piVar3 = (int *)((longlong)&pHVar1->unused + (longlong)pHVar1[0xf].unused), *piVar3 != 0x4550
      )) || ((pHVar1 = (HMODULE)0x20b, *(short *)(piVar3 + 6) != 0x20b || ((uint)piVar3[0x21] < 0xf)
             ))) {
    uVar2 = (ulonglong)pHVar1 & 0xffffffffffffff00;
  }
  else {
    uVar2 = CONCAT71(2,piVar3[0x3e] != 0);
  }
  return uVar2;
}



void FUN_140002e58(void)

{
                    // WARNING: Could not recover jumptable at 0x000140002e5f. Too many branches
                    // WARNING: Treating indirect jump as call
  SetUnhandledExceptionFilter((LPTOP_LEVEL_EXCEPTION_FILTER)&LAB_140002e68);
  return;
}



// WARNING: Function: _guard_dispatch_icall replaced with injection: guard_dispatch_icall

void FUN_140002ec4(void)

{
  code **ppcVar1;
  
  for (ppcVar1 = (code **)&DAT_1400048c0; ppcVar1 < &DAT_1400048c0; ppcVar1 = ppcVar1 + 1) {
    if (*ppcVar1 != (code *)0x0) {
      (**ppcVar1)();
    }
  }
  return;
}



// WARNING: Removing unreachable block (ram,0x000140003006)
// WARNING: Removing unreachable block (ram,0x000140002f76)
// WARNING: Removing unreachable block (ram,0x000140002f4f)
// WARNING: Globals starting with '_' overlap smaller symbols at the same address

undefined8 FUN_140002f3c(void)

{
  int *piVar1;
  uint *puVar2;
  longlong lVar3;
  uint uVar4;
  uint uVar5;
  uint uVar6;
  byte in_XCR0;
  
  piVar1 = (int *)cpuid_basic_info(0);
  uVar6 = 0;
  puVar2 = (uint *)cpuid_Version_info(1);
  uVar4 = puVar2[3];
  if ((piVar1[2] ^ 0x49656e69U | piVar1[3] ^ 0x6c65746eU | piVar1[1] ^ 0x756e6547U) == 0) {
    _DAT_140006028 = 0xffffffffffffffff;
    uVar5 = *puVar2 & 0xfff3ff0;
    _DAT_140006020 = 0x8000;
    if ((((uVar5 == 0x106c0) || (uVar5 == 0x20660)) || (uVar5 == 0x20670)) ||
       ((uVar5 - 0x30650 < 0x21 &&
        ((0x100010001U >> ((ulonglong)(uVar5 - 0x30650) & 0x3f) & 1) != 0)))) {
      DAT_14000661c = DAT_14000661c | 1;
    }
  }
  if (6 < *piVar1) {
    lVar3 = cpuid_Extended_Feature_Enumeration_info(7);
    uVar6 = *(uint *)(lVar3 + 4);
    if ((uVar6 >> 9 & 1) != 0) {
      DAT_14000661c = DAT_14000661c | 2;
    }
  }
  _DAT_140006018 = 1;
  DAT_14000601c = 2;
  if ((uVar4 >> 0x14 & 1) != 0) {
    _DAT_140006018 = 2;
    DAT_14000601c = 6;
    if ((((uVar4 >> 0x1b & 1) != 0) && ((uVar4 >> 0x1c & 1) != 0)) && ((in_XCR0 & 6) == 6)) {
      DAT_14000601c = 0xe;
      _DAT_140006018 = 3;
      if ((uVar6 & 0x20) != 0) {
        _DAT_140006018 = 5;
        DAT_14000601c = 0x2e;
        if (((uVar6 & 0xd0030000) == 0xd0030000) && ((in_XCR0 & 0xe0) == 0xe0)) {
          DAT_14000601c = 0x6e;
          _DAT_140006018 = 6;
        }
      }
    }
  }
  return 0;
}



// WARNING: Globals starting with '_' overlap smaller symbols at the same address
// Library Function - Single Match
//  __scrt_is_ucrt_dll_in_use
// 
// Library: Visual Studio 2019 Release

bool __scrt_is_ucrt_dll_in_use(void)

{
  return _DAT_140006030 != 0;
}



void __current_exception(void)

{
                    // WARNING: Could not recover jumptable at 0x000140003106. Too many branches
                    // WARNING: Treating indirect jump as call
  __current_exception();
  return;
}



void __current_exception_context(void)

{
                    // WARNING: Could not recover jumptable at 0x00014000310c. Too many branches
                    // WARNING: Treating indirect jump as call
  __current_exception_context();
  return;
}



void * __cdecl memset(void *_Dst,int _Val,size_t _Size)

{
  void *pvVar1;
  
                    // WARNING: Could not recover jumptable at 0x000140003112. Too many branches
                    // WARNING: Treating indirect jump as call
  pvVar1 = memset(_Dst,_Val,_Size);
  return pvVar1;
}



void _seh_filter_exe(void)

{
                    // WARNING: Could not recover jumptable at 0x000140003118. Too many branches
                    // WARNING: Treating indirect jump as call
  _seh_filter_exe();
  return;
}



void _set_app_type(void)

{
                    // WARNING: Could not recover jumptable at 0x00014000311e. Too many branches
                    // WARNING: Treating indirect jump as call
  _set_app_type();
  return;
}



void __setusermatherr(void)

{
                    // WARNING: Could not recover jumptable at 0x000140003124. Too many branches
                    // WARNING: Treating indirect jump as call
  __setusermatherr();
  return;
}



void _configure_narrow_argv(void)

{
                    // WARNING: Could not recover jumptable at 0x00014000312a. Too many branches
                    // WARNING: Treating indirect jump as call
  _configure_narrow_argv();
  return;
}



void _initialize_narrow_environment(void)

{
                    // WARNING: Could not recover jumptable at 0x000140003130. Too many branches
                    // WARNING: Treating indirect jump as call
  _initialize_narrow_environment();
  return;
}



void _get_initial_narrow_environment(void)

{
                    // WARNING: Could not recover jumptable at 0x000140003136. Too many branches
                    // WARNING: Treating indirect jump as call
  _get_initial_narrow_environment();
  return;
}



void _initterm(void)

{
                    // WARNING: Could not recover jumptable at 0x00014000313c. Too many branches
                    // WARNING: Treating indirect jump as call
  _initterm();
  return;
}



void _initterm_e(void)

{
                    // WARNING: Could not recover jumptable at 0x000140003142. Too many branches
                    // WARNING: Treating indirect jump as call
  _initterm_e();
  return;
}



void __cdecl exit(int _Code)

{
                    // WARNING: Could not recover jumptable at 0x000140003148. Too many branches
                    // WARNING: Subroutine does not return
                    // WARNING: Treating indirect jump as call
  exit(_Code);
  return;
}



void __cdecl _exit(int _Code)

{
                    // WARNING: Could not recover jumptable at 0x00014000314e. Too many branches
                    // WARNING: Subroutine does not return
                    // WARNING: Treating indirect jump as call
  _exit(_Code);
  return;
}



errno_t __cdecl _set_fmode(int _Mode)

{
  errno_t eVar1;
  
                    // WARNING: Could not recover jumptable at 0x000140003154. Too many branches
                    // WARNING: Treating indirect jump as call
  eVar1 = _set_fmode(_Mode);
  return eVar1;
}



void __p___argc(void)

{
                    // WARNING: Could not recover jumptable at 0x00014000315a. Too many branches
                    // WARNING: Treating indirect jump as call
  __p___argc();
  return;
}



void __p___argv(void)

{
                    // WARNING: Could not recover jumptable at 0x000140003160. Too many branches
                    // WARNING: Treating indirect jump as call
  __p___argv();
  return;
}



void __cdecl _cexit(void)

{
                    // WARNING: Could not recover jumptable at 0x000140003166. Too many branches
                    // WARNING: Treating indirect jump as call
  _cexit();
  return;
}



void _register_thread_local_exe_atexit_callback(void)

{
                    // WARNING: Could not recover jumptable at 0x000140003172. Too many branches
                    // WARNING: Treating indirect jump as call
  _register_thread_local_exe_atexit_callback();
  return;
}



int __cdecl _configthreadlocale(int _Flag)

{
  int iVar1;
  
                    // WARNING: Could not recover jumptable at 0x000140003178. Too many branches
                    // WARNING: Treating indirect jump as call
  iVar1 = _configthreadlocale(_Flag);
  return iVar1;
}



void __p__commode(void)

{
                    // WARNING: Could not recover jumptable at 0x000140003184. Too many branches
                    // WARNING: Treating indirect jump as call
  __p__commode();
  return;
}



void _initialize_onexit_table(void)

{
                    // WARNING: Could not recover jumptable at 0x00014000318a. Too many branches
                    // WARNING: Treating indirect jump as call
  _initialize_onexit_table();
  return;
}



void _register_onexit_function(void)

{
                    // WARNING: Could not recover jumptable at 0x000140003190. Too many branches
                    // WARNING: Treating indirect jump as call
  _register_onexit_function();
  return;
}



void _crt_atexit(void)

{
                    // WARNING: Could not recover jumptable at 0x000140003196. Too many branches
                    // WARNING: Treating indirect jump as call
  _crt_atexit();
  return;
}



void terminate(void)

{
                    // WARNING: Could not recover jumptable at 0x00014000319c. Too many branches
                    // WARNING: Subroutine does not return
                    // WARNING: Treating indirect jump as call
  terminate();
  return;
}



// Library Function - Single Match
//  __GSHandlerCheckCommon
// 
// Libraries: Visual Studio 2017 Release, Visual Studio 2019 Release

void __GSHandlerCheckCommon(ulonglong param_1,longlong param_2,uint *param_3)

{
  ulonglong uVar1;
  ulonglong uVar2;
  
  uVar2 = param_1;
  if ((*(byte *)param_3 & 4) != 0) {
    uVar2 = (longlong)(int)param_3[1] + param_1 & (longlong)(int)-param_3[2];
  }
  uVar1 = (ulonglong)*(uint *)(*(longlong *)(param_2 + 0x10) + 8);
  if ((*(byte *)(uVar1 + 3 + *(longlong *)(param_2 + 8)) & 0xf) != 0) {
    param_1 = param_1 + (*(byte *)(uVar1 + 3 + *(longlong *)(param_2 + 8)) & 0xfffffff0);
  }
  FUN_140002530(param_1 ^ *(ulonglong *)((longlong)(int)(*param_3 & 0xfffffff8) + uVar2));
  return;
}



int __cdecl memcmp(void *_Buf1,void *_Buf2,size_t _Size)

{
  int iVar1;
  
                    // WARNING: Could not recover jumptable at 0x00014000321f. Too many branches
                    // WARNING: Treating indirect jump as call
  iVar1 = memcmp(_Buf1,_Buf2,_Size);
  return iVar1;
}



void * __cdecl memcpy(void *_Dst,void *_Src,size_t _Size)

{
  void *pvVar1;
  
                    // WARNING: Could not recover jumptable at 0x000140003225. Too many branches
                    // WARNING: Treating indirect jump as call
  pvVar1 = memcpy(_Dst,_Src,_Size);
  return pvVar1;
}



// WARNING: This is an inlined function

void _guard_dispatch_icall(void)

{
  code *UNRECOVERED_JUMPTABLE;
  
                    // WARNING: Could not recover jumptable at 0x000140003240. Too many branches
                    // WARNING: Treating indirect jump as call
  (*UNRECOVERED_JUMPTABLE)();
  return;
}


